// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/payment_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "billing-engine/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// GetPaymentsByLoanID mocks base method.
func (m *MockPaymentService) GetPaymentsByLoanID(LoanID uint) ([]models.Payment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByLoanID", LoanID)
	ret0, _ := ret[0].([]models.Payment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaymentsByLoanID indicates an expected call of GetPaymentsByLoanID.
func (mr *MockPaymentServiceMockRecorder) GetPaymentsByLoanID(LoanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByLoanID", reflect.TypeOf((*MockPaymentService)(nil).GetPaymentsByLoanID), LoanID)
}

// PayPendingPayment mocks base method.
func (m *MockPaymentService) PayPendingPayment(LoanID uint, totalAmount float64, startInstallment, pendingInstallment int64) ([]*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayPendingPayment", LoanID, totalAmount, startInstallment, pendingInstallment)
	ret0, _ := ret[0].([]*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayPendingPayment indicates an expected call of PayPendingPayment.
func (mr *MockPaymentServiceMockRecorder) PayPendingPayment(LoanID, totalAmount, startInstallment, pendingInstallment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayPendingPayment", reflect.TypeOf((*MockPaymentService)(nil).PayPendingPayment), LoanID, totalAmount, startInstallment, pendingInstallment)
}
