// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/loan_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	viewmodels "billing-engine/app/viewmodels"
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
)

func TestNewMockLoanService(t *testing.T) {
	type args struct {
		ctrl *gomock.Controller
	}
	tests := []struct {
		name string
		args args
		want *MockLoanService
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewMockLoanService(tt.args.ctrl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewMockLoanService() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_EXPECT(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
		want   *MockLoanServiceMockRecorder
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockLoanService{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.EXPECT(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanService.EXPECT() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_CreateWeeklyLoan(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	type args struct {
		totalAmount float64
		weekNumber  int
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *viewmodels.LoanViewmodel
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockLoanService{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			got, err := m.CreateWeeklyLoan(tt.args.totalAmount, tt.args.weekNumber)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockLoanService.CreateWeeklyLoan() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanService.CreateWeeklyLoan() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanServiceMockRecorder_CreateWeeklyLoan(t *testing.T) {
	type fields struct {
		mock *MockLoanService
	}
	type args struct {
		totalAmount interface{}
		weekNumber  interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockLoanServiceMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.CreateWeeklyLoan(tt.args.totalAmount, tt.args.weekNumber); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanServiceMockRecorder.CreateWeeklyLoan() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_GetLoanByID(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	type args struct {
		loanID uint
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *viewmodels.LoanViewmodel
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockLoanService{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			got, err := m.GetLoanByID(tt.args.loanID)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockLoanService.GetLoanByID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanService.GetLoanByID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanServiceMockRecorder_GetLoanByID(t *testing.T) {
	type fields struct {
		mock *MockLoanService
	}
	type args struct {
		loanID interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockLoanServiceMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.GetLoanByID(tt.args.loanID); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanServiceMockRecorder.GetLoanByID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_GetPendingWeeklyPayment(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	type args struct {
		loanID uint
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *viewmodels.PendingPaymentViewmodel
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockLoanService{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			got, err := m.GetPendingWeeklyPayment(tt.args.loanID)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockLoanService.GetPendingWeeklyPayment() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanService.GetPendingWeeklyPayment() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanServiceMockRecorder_GetPendingWeeklyPayment(t *testing.T) {
	type fields struct {
		mock *MockLoanService
	}
	type args struct {
		loanID interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockLoanServiceMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.GetPendingWeeklyPayment(tt.args.loanID); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanServiceMockRecorder.GetPendingWeeklyPayment() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_MakePayment(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	type args struct {
		loanID          uint
		totalPaidAmount float64
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockLoanService{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if err := m.MakePayment(tt.args.loanID, tt.args.totalPaidAmount); (err != nil) != tt.wantErr {
				t.Errorf("MockLoanService.MakePayment() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestMockLoanServiceMockRecorder_MakePayment(t *testing.T) {
	type fields struct {
		mock *MockLoanService
	}
	type args struct {
		loanID          interface{}
		totalPaidAmount interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockLoanServiceMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.MakePayment(tt.args.loanID, tt.args.totalPaidAmount); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanServiceMockRecorder.MakePayment() = %v, want %v", got, tt.want)
			}
		})
	}
}
