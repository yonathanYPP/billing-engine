// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/loan_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	viewmodels "billing-engine/app/viewmodels"
	"errors"
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
)

func TestNewMockLoanService(t *testing.T) {
	type args struct {
		ctrl *gomock.Controller
	}
	tests := []struct {
		name string
		args args
		want *MockLoanService
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewMockLoanService(tt.args.ctrl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewMockLoanService() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_EXPECT(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
		want   *MockLoanServiceMockRecorder
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockLoanService{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.EXPECT(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanService.EXPECT() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_CreateWeeklyLoan(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	type args struct {
		totalAmount float64
		weekNumber  int
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *viewmodels.LoanViewmodel
		wantErr bool
	}{
		{
			name: "Valid weekly loan creation",
			args: args{
				totalAmount: 5500000,
				weekNumber:  50,
			},
			want: &viewmodels.LoanViewmodel{
				ID:      1,
				TotalAmount: 5500000,
				InstallmentAmount:       110000,
			},
			wantErr: false,
		},
		{
			name: "Invalid week number (zero)",
			args:    args{totalAmount: 5500000, weekNumber: 0},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctrl := gomock.NewController(t)
			defer ctrl.Finish() 

			mockLoanService := NewMockLoanService(ctrl) 

			if !tt.wantErr {
				mockLoanService.EXPECT().
					CreateWeeklyLoan(tt.args.totalAmount, tt.args.weekNumber).
					Return(tt.want, nil)
			} else {
				mockLoanService.EXPECT().
					CreateWeeklyLoan(tt.args.totalAmount, tt.args.weekNumber).
					Return(nil, errors.New(tt.name))
			}

			got, err := mockLoanService.CreateWeeklyLoan(tt.args.totalAmount, tt.args.weekNumber)

			if (err != nil) != tt.wantErr {
				t.Errorf("CreateWeeklyLoan() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CreateWeeklyLoan() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanServiceMockRecorder_CreateWeeklyLoan(t *testing.T) {
	type fields struct {
		mock *MockLoanService
	}
	type args struct {
		totalAmount interface{}
		weekNumber  interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockLoanServiceMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.CreateWeeklyLoan(tt.args.totalAmount, tt.args.weekNumber); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanServiceMockRecorder.CreateWeeklyLoan() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_GetLoanByID(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	type args struct {
		loanID uint
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *viewmodels.LoanViewmodel
		wantErr bool
	}{
		{
			name: "Valid loan retrieval",
			args: args{loanID: 1},
			want: &viewmodels.LoanViewmodel{
				ID:      1,
				TotalAmount: 5500000,
				InstallmentAmount:       110000,
			},
			wantErr: false,
		},
		{
			name: "Loan ID not found",
			args:    args{loanID: 99},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			mockLoanService := NewMockLoanService(ctrl)

			if !tt.wantErr {
				mockLoanService.EXPECT().
					GetLoanByID(tt.args.loanID).
					Return(tt.want, nil)
			} else {
				mockLoanService.EXPECT().
					GetLoanByID(tt.args.loanID).
					Return(nil, errors.New(tt.name))
			}

			got, err := mockLoanService.GetLoanByID(tt.args.loanID)

			if (err != nil) != tt.wantErr {
				t.Errorf("CreateWeeklyLoan() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CreateWeeklyLoan() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanServiceMockRecorder_GetLoanByID(t *testing.T) {
	type fields struct {
		mock *MockLoanService
	}
	type args struct {
		loanID interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockLoanServiceMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.GetLoanByID(tt.args.loanID); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanServiceMockRecorder.GetLoanByID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_GetPendingWeeklyPayment(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	type args struct {
		loanID uint
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *viewmodels.PendingPaymentViewmodel
		wantErr bool
	}{
		{
			name: "Successful payment",
			fields: fields{
				ctrl:     gomock.NewController(t),
				recorder: &MockLoanServiceMockRecorder{},
			},
			args: args{
				loanID:          2,
			},
			wantErr: false,
		},
		{
			name: "Payment for non-existent loan",
			fields: fields{
				ctrl:     gomock.NewController(t),
				recorder: &MockLoanServiceMockRecorder{},
			},
			args: args{
				loanID:          99,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			mockLoanService := NewMockLoanService(ctrl)

			if !tt.wantErr {
				mockLoanService.EXPECT().
					GetPendingWeeklyPayment(tt.args.loanID).
					Return(tt.want, nil)
			} else {
				mockLoanService.EXPECT().
					GetPendingWeeklyPayment(tt.args.loanID).
					Return(nil, errors.New(tt.name))
			}

			got, err := mockLoanService.GetPendingWeeklyPayment(tt.args.loanID)

			if (err != nil) != tt.wantErr {
				t.Errorf("CreateWeeklyLoan() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CreateWeeklyLoan() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanServiceMockRecorder_GetPendingWeeklyPayment(t *testing.T) {
	type fields struct {
		mock *MockLoanService
	}
	type args struct {
		loanID interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockLoanServiceMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.GetPendingWeeklyPayment(tt.args.loanID); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanServiceMockRecorder.GetPendingWeeklyPayment() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockLoanService_MakePayment(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockLoanServiceMockRecorder
	}
	type args struct {
		loanID          uint
		totalPaidAmount float64
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockLoanService{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if err := m.MakePayment(tt.args.loanID, tt.args.totalPaidAmount); (err != nil) != tt.wantErr {
				t.Errorf("MockLoanService.MakePayment() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestMockLoanServiceMockRecorder_MakePayment(t *testing.T) {
	type fields struct {
		mock *MockLoanService
	}
	type args struct {
		loanID          interface{}
		totalPaidAmount interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockLoanServiceMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.MakePayment(tt.args.loanID, tt.args.totalPaidAmount); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockLoanServiceMockRecorder.MakePayment() = %v, want %v", got, tt.want)
			}
		})
	}
}
